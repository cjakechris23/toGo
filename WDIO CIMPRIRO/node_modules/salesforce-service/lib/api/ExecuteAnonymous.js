"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var ExecuteAnonymous = /** @class */ (function () {
    function ExecuteAnonymous() {
    }
    ExecuteAnonymous.prototype.executeAnonymous = function (script, config) {
        return __awaiter(this, void 0, void 0, function () {
            var envelope, soapPath, soapServicePath, conf;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.constructEnvelope(script)];
                    case 1:
                        envelope = _a.sent();
                        soapPath = config.paths.soap;
                        soapServicePath = soapPath.replace('services/Soap/u/', 'services/Soap/s/');
                        conf = {
                            baseURL: config.urls.baseUrl,
                            url: soapServicePath,
                            method: 'post',
                            headers: {
                                'Content-Type': 'text/xml',
                                SOAPAction: 'blank',
                                'Accept-Encoding': 'gzip, deflate, br',
                            },
                            data: envelope,
                        };
                        return [2 /*return*/, axios_1.default.request(conf)];
                }
            });
        });
    };
    ExecuteAnonymous.prototype.constructEnvelope = function (script) {
        return __awaiter(this, void 0, void 0, function () {
            var abstractEnvelope;
            return __generator(this, function (_a) {
                abstractEnvelope = this.loadEnvelop();
                abstractEnvelope = abstractEnvelope.replace('<apex:sessionId></apex:sessionId>', "<apex:sessionId>" + process.env.SESSION_ID + "</apex:sessionId>");
                abstractEnvelope = abstractEnvelope.replace('<apex:String></apex:String>', "<apex:String>" + script + "</apex:String>");
                return [2 /*return*/, abstractEnvelope];
            });
        });
    };
    ExecuteAnonymous.prototype.loadEnvelop = function () {
        return "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:apex=\"http://soap.sforce.com/2006/08/apex\">\n    <soapenv:Header>\n        <apex:DebuggingHeader>\n            <apex:categories>\n                <apex:category>Apex_code</apex:category>\n                <apex:level>ERROR</apex:level>\n            </apex:categories>\n            <apex:debugLevel>NONE</apex:debugLevel>\n        </apex:DebuggingHeader>\n        <apex:SessionHeader>\n            <apex:sessionId></apex:sessionId>\n        </apex:SessionHeader>\n    </soapenv:Header>\n    <soapenv:Body>\n        <apex:executeAnonymous>\n            <apex:String></apex:String>\n        </apex:executeAnonymous>\n    </soapenv:Body>\n    </soapenv:Envelope>";
    };
    return ExecuteAnonymous;
}());
exports.default = new ExecuteAnonymous();
