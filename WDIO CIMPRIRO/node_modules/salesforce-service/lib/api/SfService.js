"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Config_1 = require("./Config");
var SoapLogin_1 = require("./SoapLogin");
var xml2js_1 = require("xml2js");
var axios_1 = require("axios");
var Record_1 = require("./Record");
var ExecuteAnonymous_1 = require("./ExecuteAnonymous");
var SfService = /** @class */ (function () {
    function SfService(opts) {
        var config = new Config_1.default(opts.configFile).getConfig();
        if (config === undefined ||
            config.urls === undefined ||
            config.urls.testUrl === undefined ||
            config.urls.baseUrl === undefined ||
            config.urls.domain === undefined ||
            config.paths === undefined ||
            config.paths.soap === undefined ||
            config.paths.data === undefined ||
            config.paths.query === undefined)
            throw new Error('There was a problem with configuration!');
        this.sfConfig = { urls: config.urls, paths: config.paths };
    }
    SfService.prototype.login = function (role) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, SoapLogin_1.default.soapLogin(role, this.sfConfig)];
            });
        });
    };
    SfService.prototype.getSessionId = function (role) {
        return __awaiter(this, void 0, void 0, function () {
            var response, xmlData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.login(role)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, xml2js_1.parseStringPromise(response.data)];
                    case 2:
                        xmlData = _a.sent();
                        process.env.SESSION_ID = xmlData['soapenv:Envelope']['soapenv:Body'][0].loginResponse[0].result[0].sessionId[0];
                        process.env.SID_CLIENT_ID = xmlData['soapenv:Envelope']['soapenv:Body'][0].loginResponse[0].result[0].userId[0];
                        return [2 /*return*/, {
                                sid: process.env.SESSION_ID,
                                sidClient: process.env.SID_CLIENT_ID,
                            }];
                }
            });
        });
    };
    SfService.prototype.query = function (soqlQuery) {
        return __awaiter(this, void 0, void 0, function () {
            var conf;
            return __generator(this, function (_a) {
                conf = {
                    baseURL: this.sfConfig.urls.baseUrl,
                    url: "" + this.sfConfig.paths.query + soqlQuery,
                    method: 'get',
                    headers: {
                        Authorization: "Bearer " + process.env.SESSION_ID,
                        'Content-Type': 'application/json',
                    },
                };
                return [2 /*return*/, axios_1.default.request(conf)];
            });
        });
    };
    SfService.prototype.getRecord = function (recordId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Record_1.default.getRecord(recordId, this.sfConfig)];
            });
        });
    };
    SfService.prototype.createRecord = function (object, objectFields) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Record_1.default.createRecord(object, objectFields, this.sfConfig)];
            });
        });
    };
    SfService.prototype.updateRecord = function (recordId, objectFields) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Record_1.default.updateRecord(recordId, objectFields, this.sfConfig)];
            });
        });
    };
    SfService.prototype.deleteRecord = function (recordId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Record_1.default.deleteRecord(recordId, this.sfConfig)];
            });
        });
    };
    SfService.prototype.executeAnonymousScript = function (script) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, ExecuteAnonymous_1.default.executeAnonymous(script, this.sfConfig)];
            });
        });
    };
    return SfService;
}());
exports.default = SfService;
